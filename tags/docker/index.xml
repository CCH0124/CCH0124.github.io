<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on</title><link>https://cch0124.github.io/tags/docker/</link><description>Recent content in Docker on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 05 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://cch0124.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker 基礎介紹</title><link>https://cch0124.github.io/blog/2019-10-05-docker-overview/</link><pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate><guid>https://cch0124.github.io/blog/2019-10-05-docker-overview/</guid><description>Why do you need Docker 從先前的架構來看，建置一個網站需要有 Apache、MySQL、PHP 等。其中它們都依賴於當前的作業系統或著有些服務因為版本而依賴於不同的函式庫。因此這讓架構會變得有點凌亂導致新進的工程師必須去了解此凌亂的架構才能進行工作，而 Docker 技術能夠幾乎解決這樣的問題。
What can I do 從下圖看出，在作業系統上裝一個 Docker，並透過 docker run 去建置容器。Docker 能夠將每個運行服務的每一個組件，丟至該服務容器（container）中，讓每個服務依賴於該容器中被定義的 image。
by docker.com
那這又跟 VM 又有麼差異呢 ? 在資源使用率上會有差異。
What is container 一種隔離環境的技術， 可以擁有自己的 process、network、mount，但是容器會共用 kernel。在又 Docker 此技術之前，容器的概念先前就有，像是 lkx、chroot 等。但整合方面的完整性都歸功於 Docker。 container 應該要說是一種概念，Docker 是一個實作 container 的技術。container 竟然是一種概念，它必定有規範，稱作 Open Container Initiative (OCI)。藉由此標準可以提升 container 不同解決方案的相容性。 然而，Open Container Initiative (OCI) 定義兩大的標準
Runtime Specification Image Specification 對於 Docker 來說，image 相關的操作 images/pull/push 等甚至是藉由 Dockerfile 來建立自己的工作環境，這些都牽扯到了 image。Image Specification 就是來規範 Image。 相對的 Runtime Specification 是控制 container 的生命週期 create/delete/start/stop 或是運行 container 時透過 exec/attach 與 container 的互動。對於 container 中，隔離會使用 namespace 來完成，namespace 操作會有 pid、network、ipc、mount 等。</description></item><item><title>Docker 資源詳解</title><link>https://cch0124.github.io/blog/2018-03-30-docker-run/</link><pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate><guid>https://cch0124.github.io/blog/2018-03-30-docker-run/</guid><description>Table of content Docker image Docker Port mapping Docker Volume mapping Docker Networking Docker image Dockerfile 是建構 image 的檔案，建構 image 時會讀取 Dockerfile 的指令一層一層的建構。而 container 是由 image 建構出來的實例。
image 特點 分層儲存 當需要修改 image 內的某個檔案時，只會對上方的讀寫層進行改動，不會覆蓋下層既有檔案系統內容。
Copy-on-Write 從分層儲存可以知道，在建立 container 之後我們會在一個可寫層上並進行操作，但是在 image layers 的檔案能否修改 ? 是可以的，會複製該檔案至可寫層。
Dockerfil Arg by 網管人
CMD vs ENTRYPOINT 在 Dockerfile 中，只能有一個 ENTRYPOINT 或 CMD 指令，如果有多個 ENTRYPOINT 或 CMD 指令則以最後一個為準。
ENTRYPOINT 往往用於設置容器啟動後的第一個命令，這對一個容器來說往往是固定的。 執行 docker run 如果帶有其他命令參數，不會覆蓋 ENTRYPOINT 指令 docker run 的 &amp;ndash;entrypoint 可以覆蓋 Dockerfile 中 ENTRYPOINT 設置的命令。 CMD 往往用於設置容器啟動的第一個命令的默認參數，這對一個容器來說可以是變化的。docker run &amp;lt;command&amp;gt; 往往用於給出替換 CMD 的臨時參數。 docker run 如果帶有其他命令參數，將會覆蓋 CMD 指令。 如果在 Dockerfile 中，還有 ENTRYPOINT 指令，則 CMD 指令中的命令將作為 ENTRYPOINT 指令中的命令的參數。 Example Nginx Dockerfile FROM ubuntu:14.</description></item><item><title>basic command of docker</title><link>https://cch0124.github.io/blog/2018-03-29-docker-command/</link><pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate><guid>https://cch0124.github.io/blog/2018-03-29-docker-command/</guid><description>Table of content Basic command Image command Containers Command Basic command 查看 Docker 訊息 docker info 登入 hub.docker.com docker login Image command 查看本地端以下載的 image docker images 移除 image docker rmi -f {image ID} # -f 強制，直接將運行中的 container 刪除 取得 container 的資訊 docker inspect {ImageID} 取得 image 的歷史紀錄 docker history {ImageName} Containers Command 取得運行的 container docker ps -a 運行 container docker run -it {imageName} 取得該 container 的 log docker logs {CONTAINER} 啟動 container docker start {ConatainerName} 停止 container docker stop {ConatainerName} 暫停 container docker pause &amp;lt;ConatainerName&amp;gt; 取消暫停 container docker unpause {ConatainerName} kill 運行中的 container docker kill {ConatainerName} 移除 container docker rm {ConatainerName} 進入 container docker exec -it {ConatainerName}</description></item><item><title>basic command of docker-compose</title><link>https://cch0124.github.io/blog/2018-03-29-docker-compose-command/</link><pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate><guid>https://cch0124.github.io/blog/2018-03-29-docker-compose-command/</guid><description>docker compose Docker compose 是一個用於定義和運行多個容器的 Docker 的工具。 它使用 yml 檔案定義應用程式服務。
docker-compose 指令基於每個工作目錄 可以在一台電腦上運行多個 Docker 容器 Table of content run yml file 將容器及環境配置移除 查看 container 運行資訊 kill 特定 container 刪除 container run yml file docker-compose up -d -f {.yml} # -d 後臺運行，-f 指定 docker-compose yml 檔案 將容器及環境配置移除 docker-compose down 查看 container 運行資訊 docker-compose ps kill 特定 container docker-compose kill {service} 刪除 container 要將刪除的 container 先停止運行
docker-compose rm {service}</description></item></channel></rss>