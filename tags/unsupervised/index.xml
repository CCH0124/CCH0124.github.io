<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unsupervised on</title><link>https://cch0124.github.io/tags/unsupervised/</link><description>Recent content in unsupervised on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 03 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://cch0124.github.io/tags/unsupervised/index.xml" rel="self" type="application/rss+xml"/><item><title>ML-3-meanshift</title><link>https://cch0124.github.io/blog/2020-01-03-meanshift.md/</link><pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate><guid>https://cch0124.github.io/blog/2020-01-03-meanshift.md/</guid><description>What is meanshift 資料集的密度為一個隨核密度分佈，能夠在此資料集中找到局部極值，即為一個 kernel density estimation（它不需要預先知道樣本數據的概率密度分佈函數，完全能夠對樣本點的計算），因此將資料分群。
Example import numpy as np import matplotlib.pyplot as plt import pandas as pd from sklearn.cluster import MeanShift, estimate_bandwidth from sklearn import datasets from sklearn import preprocessing #create datasets # iris = datasets.load_iris() # X = iris.data[:, :4] url = &amp;#34;https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv&amp;#34; data = pd.read_csv(url) le = preprocessing.LabelEncoder() data[&amp;#39;species&amp;#39;] = le.fit_transform(data.iloc[:,-1]) X = data.iloc[:, 0:4].to_numpy() y = data.iloc[:,-1].to_numpy() plt.scatter(X[:, 0], X[:, 1], c=&amp;#34;yellow&amp;#34;, marker=&amp;#39;o&amp;#39;, label=&amp;#39;see&amp;#39;) plt.</description></item><item><title>ML-2-DBSCAN</title><link>https://cch0124.github.io/blog/2020-01-02-dbscan/</link><pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate><guid>https://cch0124.github.io/blog/2020-01-02-dbscan/</guid><description>What is DBSCAN DBSCAN（Density-based spatial clustering of applications with noise）是一種基於密度的演算法。給定一個數量點的閾值，表示該群集要超過一定的密度程度。密度程度則會透過距離方式來做計算。
Concept Parameters Eps 鄰域的最大半徑 MinPts 點的 Eps-neighborhood 中的最少點數量 Density Definition $\varepsilon$-Neighborhood 距離對象半徑 $\varepsilon$ 以內的對象。 距離 $\varepsilon$ 內的所有點的集合。 $N_{\varepsilon}(p):{q|d(p,q) \leq \varepsilon}$
High density 一個對象的 $\varepsilon$-Neighborhood 至少包含 MinPts 個對象。 ${\varepsilon}$-Neighborhood of $p$ ${\varepsilon}$-Neighborhood of $q$ Density of p is high (MinPts = 4) Density of q is low (MinPts = 4)</description></item><item><title>ML day1 k-means</title><link>https://cch0124.github.io/blog/2019-12-31-k-means/</link><pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate><guid>https://cch0124.github.io/blog/2019-12-31-k-means/</guid><description>What is K-means 物以類聚的概念，K-means 的 K 就是幾群的意思。利用距離和群心的計算去完成聚類的任務。
K-means Algorithm 先設定 K 要分為幾群 輸入特徵 為 K 個群心計算 Euclidean distance 把每個資料分群至距離最短的該群心 重新計算各群的群心 不斷重複 3-5，直到收斂 Python sklearn example import pandas as pd import numpy as np import sklearn.metrics as sm import matplotlib.pyplot as plt from sklearn.cluster import KMeans from sklearn import datasets from sklearn import preprocessing url = &amp;#34;https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv&amp;#34; data = pd.read_csv(url) le = preprocessing.LabelEncoder() data[&amp;#39;species&amp;#39;] = le.fit_transform(data.iloc[:,-1]) X = data.iloc[:, 0:4].</description></item></channel></rss>