<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on</title><link>https://cch0124.github.io/tags/web/</link><description>Recent content in Web on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://cch0124.github.io/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>XSS</title><link>https://cch0124.github.io/blog/2018-12-22-xss/</link><pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate><guid>https://cch0124.github.io/blog/2018-12-22-xss/</guid><description>XSS XSS 為跨網站指令碼（Cross-Site Scripting），通常是網頁開發者在開發時疏忽的漏洞，攻擊著發現網站存在漏洞便會利用代碼注入的方式將惡意的指令碼植入該網站。
XSS 主要受害者是瀏覽被注入代碼網站的使用者，因為惡意的指令碼會被瀏覽者下載到本地端執行，藉此取得使用者的資訊。
攻擊手段 竊取 cookie、session，使得不需要帳號密碼即可登入。 植入惡意 Flash，例用 crossdomain 權限進一步取得更高權限 利用 javascript 以受害者身分執行特定動作 利用 javascript 對其它網站造成 DDos 利用 iframe、frame、XMLHttpRequest 以釣魚網站覆蓋原本頁面（Clicckjacking） 結合其它漏洞（CSRF）進行更進一步的惡意行為。PaPy 傳播 XSS 蠕蟲 獲取使用者端相關資訊，如使用者的歷史紀錄 CSRF 是代替用戶完成指定的動作，需要知道其他用戶頁面的代碼和數據包。
典型跨網站指令碼 DOM（Document Object Model） 反射型 儲存型 其中反射型和DOM，都是輸入便得到輸出，儲存型則是輸入後先儲存置資料庫，當取用時再從資料庫中取出並輸出，因此儲存型會把惡意代碼存到伺服器上。
DOM XSS HTML 檔都是以 Document Object Model 進行各種標籤與元件架構而成，此類型攻擊原理由 javascript 在動態更新網頁時，從網址中提取數據並進行惡意 script 的執行。
DOM XSS 主要是 javascript 的 API 原始碼審查的不夠嚴謹造成的，如：document.location、document.URL、document.URLUnencoded、document.referrer、window.location 等 API 都可能透過惡意設計的 URL 來控制彈跳視窗，此類型大多為網站釣魚，對系統不致造成危害，且 DOM XSS 攻擊屬於被動式攻擊，無使用者連線該 URL 即不會觸發。</description></item></channel></rss>