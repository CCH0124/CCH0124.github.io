<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>recursion on</title><link>https://cch0124.github.io/tags/recursion/</link><description>Recent content in recursion on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://cch0124.github.io/tags/recursion/index.xml" rel="self" type="application/rss+xml"/><item><title>LeetCode 1306. Jump Game III</title><link>https://cch0124.github.io/code/2020-12-10-jumpgameiii/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate><guid>https://cch0124.github.io/code/2020-12-10-jumpgameiii/</guid><description>題目，會給一個起始點(start)，而這個起始點可以選擇對元素進行加或減，透過這種方式不斷進行，最後檢測有沒有辦法到達值 0 的元素。
思路就是要麻當前元素進行減或加，用遞迴方式不斷去求值。使用一個 boolean 的陣列記錄當前該位置是否訪問過。
class Solution { public boolean canReach(int[] arr, int start) { boolean [] vis = new boolean[arr.length]; return canReach(arr, start, vis); } private boolean canReach(int[] arr, int start, boolean[] vis){ if (start &amp;lt; arr.length &amp;amp;&amp;amp; start &amp;gt;= 0 &amp;amp;&amp;amp; !vis[start]){ if (arr[start] == 0){ return true; } vis[start] = true; return canReach(arr, start + arr[start], vis) || canReach(arr, start - arr[start], vis); } return false; } }</description></item></channel></rss>